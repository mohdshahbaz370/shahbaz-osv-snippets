import React, { useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

const LGDetails1 = () => {
  const [show, setShow] = useState(false);
  const [body, setBody] = useState([]);

  const initialValues={
    bank: "",
    kindofguarantee: "",
    typeofguarantee: "",
    formofguarantee: "",
    nameofguarantee: "",
    language: "",
    type: "",
    amount: "",
    validitytype: "",
    expirydate: "",
  }

  const onsubmit=(values, { resetForm }) => {
    console.log(values);
    setBody([...body, values]);
    resetForm();
  }

  const validation=Yup.object({
    bank: Yup.string().required("Mandatory"),
    kindofguarantee: Yup.string().required("Mandatory"),
    typeofguarantee: Yup.string().required("Mandatory"),
    formofguarantee: Yup.string().required("Mandatory"),
    nameofguarantee: Yup.string().required("Mandatory"),
    language: Yup.string().required("Mandatory"),
    type: Yup.string().required("Mandatory"),
    amount: Yup.number()
      .required("Mandatory")
      .test(
        "is positive?",
        "Error:The number should be positive",
        (value) => value > 0
      ),
    validitytype: Yup.string().required("Mandatory"),
    expirydate: Yup.string().required("Mandatory"),
    currency:Yup.string().required("Select the Currency")
  })

  const bank = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const kguarantee = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const tguarantee = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const fguarantee = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const nguarantee = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const language = ["English", "Telugu", "Hindi", "Arabic", "Spanish", "Tamil"];
  const type = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const validitytype = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];

  const currency = ["USD", "EUR", "POUND", "INR", "AUSD", "SAR"];
  return (
    <Formik
      initialValues={initialValues}
      onSubmit={onsubmit}
      validationSchema={validation}
    >
      {() => (
        <>
          <button onClick={() => setShow(!show)}>
            <h1>1.Bank & Letter of Guarantee Details</h1>
          </button>
          {show && (
            <Form>
              <h2>Bank & Letter of Guarantee Type</h2>
              <div>
                <label htmlFor="bank"></label>
                <Field as="select" name="bank">
                  <option>Bank</option>
                  {bank.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>

                <ErrorMessage name="bank" />
              </div>
              <div>
                <label htmlFor="kindofguarantee"></label>
                <Field as="select" name="kindofguarantee">
                  <option>Kind of Guarantee</option>
                  {kguarantee.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="kindofguarantee" />
              </div>
              <div>
                <label htmlFor="typeofguarantee"></label>
                <Field as="select" name="typeofguarantee">
                  <option> Type of Guarantee</option>
                  {tguarantee.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="typeofguarantee" />
              </div>
              <div>
                <label htmlFor="formofguarantee"></label>
                <Field as="select" name="formofguarantee">
                  <option> Form of Guarantee</option>
                  {fguarantee.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>

                <ErrorMessage name="formofguarantee" />
              </div>
              <div>
                <label htmlFor="nameofguarantee"></label>
                <Field as="select" name="nameofguarantee">
                  <option> Name of Guarantee</option>
                  {nguarantee.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>

                <ErrorMessage name="nameofguarantee" />
              </div>
              <div>
                <label htmlFor="language"></label>
                <Field as="select" name="language">
                  <option> Language</option>
                  {language.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="language" />
              </div>
              <div>
                <h3>Guarantee Amount</h3>
                <label htmlFor="type"></label>
                <Field as="select" name="type">
                  <option> Type</option>
                  {type.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="type" />
              </div>
              <div>
                <label htmlFor="currency"></label>
                <Field as="select" name="currency">
                  <option> Currency</option>
                  {currency.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="currency" />
                <label htmlFor="amount"></label>
                <Field type="text" name="amount" placeholder="Amount" />
                <ErrorMessage name="amount" />
              </div>

              <div>
                <h3>Expiry Date</h3>
                <label htmlFor="validitytype"></label>

                <Field as="select" name="validitytype">
                  <option>Validity Type</option>
                  {validitytype.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="validitytype" />
                <label htmlFor="expirydate"></label>
                <Field
                  type="date"
                  name="expirydate"
                  placeholder="Expiry Date"
                />
                <ErrorMessage name="expirydate" />
              </div>

              <div>
                <button
                  type="reset"
                  onClick={({ resetForm }) => {
                    resetForm();
                  }}>
                  Clear
                </button>
                <button type="submit">Next</button>
              </div>
            </Form>
          )}
        </>
      )}
    </Formik>
  );
};

export default LGDetails1;




import React, { useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

const AppDelStatus1 = () => {
  const [show, setShow] = useState(false);
  const [fill, setFill] = useState([]);

  const delivery_of_original_guarantee = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const deliveryto = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const addresstype = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];
  const country = [
    "Yes Bank Ltd",
    "ICICI Bank Ltd",
    "HDFC Bank",
    "SBI",
    "CANARA Bank",
    "UCO Bank",
  ];

  return (
    <Formik
      initialValues={{
        name: "",
        crnumber: "",
        deloforiguara: "",
        deliveryto: "",
        addresstype: "",
        shortaddress: "",
        buildingno: "",
        unitno: "",
        streetname: "",
        secondnumber: "",
        country: "",
        district: "",
        city: "",
        postalcode: "",
      }}
      validationSchema={Yup.object().shape({
        name: Yup.string().required("Mandatory"),
        crnumber: Yup.number()
          .required("Mandatory")
          .test(
            "is positive?",
            "Error:The number should be positive",
            (value) => value > 0
          ),
        deloforiguara: Yup.string().required("Mandatory"),
        deliveryto: Yup.string().required("Mandatory"),
        addresstype: Yup.string().required("Mandatory"),
        shortaddress: Yup.string().required("Mandatory"),
        buildingno: Yup.string().required("Mandatory"),
        unitno: Yup.string().required("Mandatory"),
        streetname: Yup.string().required("Mandatory"),
        secondnumber: Yup.string().required("Mandatory"),
        country: Yup.string().required("Mandatory"),
        district: Yup.string().required("Mandatory"),
        city: Yup.string().required("Mandatory"),
        postalcode: Yup.string().required("Mandatory"),
      })}
      onSubmit={(values, { resetForm }) => {
        console.log(values);
        setFill([...fill, values]);
        resetForm();
      }}
    >
      {() => (
        <>
          <button onClick={() => setShow(!show)}>
            <h1>2.Applicant & Delivery Details</h1>
          </button>
          {show && (
            <Form>
              <h2>Applicant Details</h2>
              <h4>Enter CR Number to validate company and letter request</h4>
              <div>
                <label htmlFor="name"></label>
                <Field type="text" name="name" placeholder="Name" />
                <ErrorMessage name="name" />
              </div>
              <div>
                <label htmlFor="crnumber"></label>
                <Field type="text" name="crnumber" placeholder="CR Number" />
                <ErrorMessage name="crnumber" />
              </div>

              <div>
                <h4>Applicant and Delivery Address</h4>
                <label htmlFor="deloforiguara"></label>
                <Field as="select" name="deloforiguara">
                  <option> Delivery of Original Guarantee</option>
                  {delivery_of_original_guarantee.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="deloforiguara" />
              </div>

              <div>
                <label htmlFor="deliveryto"></label>
                <Field as="select" name="deliveryto">
                  <option> Delivery to</option>
                  {deliveryto.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="deliveryto" />
              </div>

              <div>
                <label htmlFor="addresstype"></label>
                <Field as="select" name="addresstype">
                  <option> Address Type</option>
                  {addresstype.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="addresstype" />
              </div>

              <div>
                <label htmlFor="shortaddress"></label>
                <Field
                  type="text"
                  name="shortaddress"
                  placeholder="Short Address"
                />
                <ErrorMessage name="shortaddress" />
              </div>

              <div>
                <label htmlFor="buildingno"></label>
                <Field
                  name="buildingno"
                  type="text"
                  placeholder="Building No"
                />
                <ErrorMessage name="buildingno" />

                <label htmlFor="unitno"></label>
                <Field name="unitno" type="text" placeholder="Unit No" />
                <ErrorMessage name="unitno" />
              </div>

              <div>
                <label htmlFor="streetname"></label>
                <Field
                  name="streetname"
                  type="text"
                  placeholder="Street Name"
                />
                <ErrorMessage name="streetname" />

                <label htmlFor="secondnumber"></label>
                <Field
                  name="secondnumber"
                  type="text"
                  placeholder="Second No"
                />
                <ErrorMessage name="secondnumber" />
              </div>

              <div>
                <label htmlFor="country"></label>
                <Field as="select" name="country">
                  <option>Country</option>
                  {country.map((e) => {
                    return <option>{e}</option>;
                  })}
                </Field>
                <ErrorMessage name="country" />

                <label htmlFor="district"></label>
                <Field name="district" type="text" placeholder="District" />
                <ErrorMessage name="district" />
              </div>

              <div>
                <label htmlFor="city"></label>
                <Field name="city" type="text" placeholder="City" />
                <ErrorMessage name="city" />

                <label htmlFor="postalcode"></label>
                <Field
                  name="postalcode"
                  type="text"
                  placeholder="Postal Code"
                />
                <ErrorMessage name="postalcode" />
              </div>

              <a href="https://www.google.com/">
                Applicant Address is Different
              </a>
              <div>
                <button
                  type="reset"
                  onClick={({ resetForm }) => {
                    resetForm();
                  }}
                >
                  Clear
                </button>
                <button type="submit">Next</button>
              </div>
            </Form>
          )}
        </>
      )}
    </Formik>
  );
};

export default AppDelStatus1;
