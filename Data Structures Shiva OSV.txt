// reversing of string
// function reverse(str) {

//   if (!str || str.length < 2 || typeof str !== 'string') {
//     return 'that is not good'
//   }
//   const backwards = [];
//   const length = str.length;
//   const index = length - 1;
//   for (let i = index; i >= 0; i--) {
//     backwards.push(str[i])

//   };
//   console.log(length);
//   console.log(backwards);
//   return backwards.join('')
// }

// function reverse2(str) {
//   return str.split('').reverse().join('');
// }
// function sum(num) {
//   // if (!str || str.length < 2 || typeof str !== 'string') {
//   //   return 'that is not good'
//   // }
//   const array = [];
//   const length = num.length;
//   const index = length - 1;
//   let sum = 0
//   for (let i = 0; i <= length - 1; i++) {
//     array.push(num[i])
//     let sum = sum + array[i]
//   };
//   return sum()
// }

// const reverse3 = str => str.split('').reverse().join('');
// console.log(reverse('Shivakumar Adepu Code Astra LLP'));
// console.log(reverse2('Shivakumar Adepu Code Astra LLP'));
// console.log(reverse3('Shivakumar Adepu Code Astra LLP'));
// console.log(sum('23252313'));

// function sum(a,b){

//   const add = a + b;

//   return add;
// }
// console.log(sum (2,3));
//fizzbuss
// function fizzbuzz(num){
//   for (let i = 1; i <= num; i++){

//       if(i%3 === 0 && i%5 === 0){
//       console.log('fizzbuzz')
//       }
//       else if(i%5 === 0) {
//       console.log('buzz')
//       }
//       else if(i%3 === 0) {
//       console.log('fizz')
//       }
//       else{console.log(i) }
//   }
// }
// fizzbuzz(16)
// Checks if a given number is prime
//  Argument: An integer
// function isPrime(num) {
//   if (num <= 1) return false;

//   if (!Number.isInteger(num)) return false;

//   for (let i = 2; i <= Math.sqrt(num); i++) {
//     if (num % i == 0) return false;
//   }

//   return true;
// }

// // Returns an array of all the numbers less than or equal to the input number
// function primesUpto(num) {
//   // initialize array
//   const primes = [];
//   // Loop from 2 upto `num`
//   for (let i = 2; i <= num; i++) {
//     // push the counter into array if the counter is prime
//     if (isPrime(i)) primes.push(i);
//   }

//   // return array
//   return primes;
// }

// for (let i = -3; i <= 15; i++) {
//   console.log(`${i} is ${isPrime(i) ? "prime" : "not prime"}`);
// }

// let i = 1.5;
// console.log(`${i} is ${isPrime(i) ? "prime" : "not prime"}`);

// console.log(primesUpto(1000000).length);
// const cached_fib = {};

// function fib(n) {
//   if (n == 1 || n == 2) return n - 1;

//   if (cached_fib[n]) return cached_fib[n];

//   cached_fib[n] = fib(n - 1) + fib(n - 2);

//   return cached_fib[n];
// }

// console.log(fib(50));

//union of arrays
// function union_arrays (x, y) {
//   const obj = {};
//   for (let i = x.length-1; i >= 0; -- i)
//      obj[x[i]] = x[i];
//   for (let i = y.length-1; i >= 0; -- i)
//      obj[y[i]] = y[i];
//   const res = []
//   for (let k in obj) {
//     // if (obj.hasOwnProperty(k))  // <-- optional
//       res.push(obj[k]);
//   }
//   return res;
// }

// console.log(union_arrays([-34,35,-45,48,49], [48,55]));
// const mergedArray=[...array1,...array2];

// function mergerSortedArrays(array1,array2){
//   const mergedArray=[...array1,...array2];
//     return mergedArray;
// }
// console.log(mergerSortedArrays([0,3,4,31],[4,6,30]).sort((a,b)=>a-b))

// function mergerSortedArrays(array1,array2){
//   const mergedArray=[...array1,...array2];
// let i=1;
// let j=1;
// const mergedArray=[];
// let array1Item=array1[0];
// let array2Item=array2[0];

//   if(array1.length===0){
//     return array2;
//   }

//   if(array2.length===0){
//     return array1;
//   }

//   while(array1Item||array2Item){
//   console.log(array1Item,array2Item)
//     if(!array2Item||array1Item<array2Item){
//       mergedArray.push(array1Item);
//       array1Item=array1[i]
//       i++
//     }

//         else{
//       mergedArray.push(array2Item);
//       array2Item=array2[j]
//       j++
//     }
//   }
//   return mergedArray;
// }

// console.log(mergerSortedArrays([0,3,4,31],[4,6,30]))

// let numbers = [0, 1, 22, 13, 1, 20, 30];
// numbers.sort((a, b) => a - b);

// console.log(numbers);

// class Myarray {
//   constructor() {
//     this.length = 0;
//     this.data = {};
//   }
//   get(index) {
//     return this.data[index]
//   }
//   push(item) {
//     this.data[this.length] = item;
//     this.length++;
//     return this.length;
//   }
//   pop(){
//     const lastItem=this.data[this.length-1];
//     delete this.data[this.length-1];
//     this.length--;
//     return lastItem;
//   }
//   delete(index){
//     const item=this.data[index];
//     this.shiftItems(index);

//   }
//   shiftItems(index){
//     for(let i=index;i<this.length-1;i++){
//       this.data[i]=this.data[i+1];
//     }
//     delete this.data[this.lenth-1]
//     this.length--;
//   }
// }
// const newArray = new Myarray();
// newArray.push('hi');
// newArray.push('you');
// newArray.push('!');
// // newArray.pop();
// newArray.delete(2)
// newArray.push('are');
// newArray.push('nice');
// console.log(newArray);

// function findNemo(array){
//   let t0=performance.now()
//   for (let i=0;i<array.length;i++){

//     if (array[i]==='nemo'){
//       console.log('Found Nemo!');
//     }
//   }
//   let t1=performance.now()
//   console.log('Call to find Nemo took'+(t1-t0)+'milliseconds')
// }
// const nemo=['nemo'];
// const everyone=['dory','bruce','marlin',,'nemo','gill','bloat','bigel','squirt','darla','hank']
// const large=new Array(100000).fill('nemo')
// findNemo(large);

// const boxes=[0,1,2,3,4,5,6,7,8,9];

// function logFirstTwoBoxes(boxes){
//   console.log(boxes[0])
//   console.log(boxes[1])
// }
// logFirstTwoBoxes(boxes)

// function funChallenge(input){
//   let a=10;//O(1)
//   a =50+3;//O(1)
//   for(let i=0;i<input.length;i++){//O(n)
//     anotherFunction();//O(n)
//     let stranger=true;//O(n)
//     a++;//O(n)
//   }
//   return a;//O(1)
// }
// funChallenge()
// //3+n+n+n+n=3+4n
// Math.pow(6, 100);
// console.log(Math.pow(6, 100));

// const strings=['a','b','c','d','e','f'];
// strings[2];
// console.log(strings[2])

//objects

// let user={
//   age:54,
// name:'Shiva',
// magic:true,
//   scream:function(){
//     console.log('ahhhhhh')
//   }
// }

// user.age
// user.spell='abbra ka dabbra'
// console.log(user.age)
//Given a number check the prime numbers below it
//Argument of num
//Remove the numbers starting from above 2*i and 3*i...
// function seiveEratosthenes(num) {
//   for (i = 3; i < Math.sqrt(num); i++) {
//     for (j = 2; j < i; j++) {
//       if (j % i == 0) {
//         return i;
//       }
//     }
//   }
// }

// function GenerateSieve(max) {
//   // Creating an array indicating whether numbers are prime.
//   const is_prime = new Array(max);

//   for (let i = 2; i <= max; i++) {
//     is_prime[i] = true;
//   }

//   //Crossing out multiplies
//   for (let i = 2; i <= max; i++) {
//     //Check if its prime
//     if (is_prime[i]) {
//       //Eliminate the multiplies of i
//       for (let j = i * 2; j <= max; j += i) {
//         is_prime[j] = false;
//       }
//     }
//   }
//   return is_prime;
// }

// console.log(GenerateSieve(10));
// console.log(is_prime);

// function primesUpto(n) {
//   const sieve = new Array(n + 2);

//   for (let i = 2; i <= Math.sqrt(n); i++) {
//     if (sieve[i]) continue;

//     for (let j = 2; j <= n / i; j++) {
//       sieve[i * j] = true;
//     }
//   }

//   const primes = [];

//   for (let i = 2; i <= n; i++) {
//     if (!sieve[i]) primes.push(i);
//   }

//   return primes;
// }

// console.log(primesUpto(30));

// class HashTable {
//   constructor(size){
//     this.data = new Array(size);
//     // this.data = [];
//   }

//   _hash(key) {
//     let hash = 0;
//     for (let i =0; i < key.length; i++){
//         hash = (hash + key.charCodeAt(i) * i) % this.data.length
//     }
//     return hash;
//   }

//   set(key, value) {
//     let address = this._hash(key);
//     if (!this.data[address]) {
//       this.data[address] = [];
//     }
//     this.data[address].push([key, value]);
//     return this.data;
//   }

//   get(key){
//     const address = this._hash(key);
//     const currentBucket = this.data[address]
//     if (currentBucket) {
//       for(let i = 0; i < currentBucket.length; i++){
//         if(currentBucket[i][0] === key) {
//           return currentBucket[i][1]
//         }
//       }
//     }
//     return undefined;
//   }

//   keys(){
//     const keysArray = [];
//     console.log(this.data.length);
//     for (let i = 0; i < this.data.length; i++){
//       if(this.data[i]){
//         keysArray.push(this.data[i][0][0])
//       }
//     }
//     return keysArray;
//   }
// }

// const myHashTable = new HashTable(50);
// myHashTable.set('grapes', 10000)
// myHashTable.set('grapes', 10000)
// myHashTable.get('grapes')
// myHashTable.set('apples', 9)
// myHashTable.get('apples')
// myHashTable.keys()

// function first(input){
//   for(let i = 0; i <=input.length ; i++){
//     for(let j = i+1; j <=input.length ; j++){
//       if(input[i] === input[j]){
//         return input[i];
//       }
//     }
//   }
//   return undefined;
// }//o(n2)

// function second(input){
//   let map={};
//   for(let i = 0;i <=input.length ;i++){
//     if(map[input[i]]!==undefined){
//       // console.log(map)
//       return input[i];
//     }else{
//       map[input[i]]=i;

//     }
//     console.log(map);
//   }
// }
// console.log(second([2,1,1,2,3,5,1,2,4]));

// const obj1={a:true};
// const obj2=obj1;
// console.log(obj1===obj2)
// console.log(obj1);
// console.log(obj2)

// class Node{
//   constructor(value){
//     this.value=value;
//     this.next=null
//   }
// }

// class LinkedList {
//     constructor(value) {
//         this.head = {
//             value: value,
//             next: null
//         };
//         this.tail = this.head;
//         this.length = 1;
//     }
//     append(value) {
//       const newNode = {
//         value: value,
//         next: null
//       }
//       console.log(newNode)
//       this.tail.next = newNode;
//       this.tail = newNode;
//       this.length++;
//       return this;
//     }
//     prepend(value) {
//       const newNode = {
//         value: value,
//         next: null
//       }
//       newNode.next = this.head;
//       this.head = newNode;
//       this.length++;
//       return this;
//     }
//     printList() {
//       const array = [];
//       let currentNode = this.head;
//       while(currentNode !== null){
//           array.push(currentNode.value)
//           currentNode = currentNode.next
//       }
//       return array;
//     }
//     insert(index, value){
//       //Check for proper parameters;
//       if(index >= this.length) {
//         console.log('yes')
//         return this.append(value);
//       }

//       const newNode = {
//         value: value,
//         next: null
//       }
//       const leader = this.traverseToIndex(index-1);
//       const holdingPointer = leader.next;
//       leader.next = newNode;
//       newNode.next = holdingPointer;
//       this.length++;
//       return this.printList();
//     }
//     traverseToIndex(index) {
//       //Check parameters
//       let counter = 0;
//       let currentNode = this.head;
//       while(counter !== index){
//         currentNode = currentNode.next;
//         counter++;
//       }
//       return currentNode;
//     }
//     remove(index) {
//       // Check Parameters
//       const leader = this.traverseToIndex(index-1);
//       const unwantedNode = leader.next;
//       leader.next = unwantedNode.next;
//       this.length--;
//       return this.printList();
//     }
//     reverse() {
//       if (!this.head.next) {
//         return this.head;
//       }
//       let first = this.head;
//       this.tail = this.head;
//       let second = first.next;

//       while(second) {
//         const temp = second.next;
//         second.next = first;
//         first = second;
//         second = temp;
//       }

//       this.head.next = null;
//       this.head = first;
//       return this.printList();
//     }
// }

// let myLinkedList = new LinkedList(10);
// myLinkedList.append(5)
// myLinkedList.append(16)
// myLinkedList.prepend(1)
// myLinkedList.printList()
// myLinkedList.insert(2, 99)
// myLinkedList.insert(20, 88)
// myLinkedList.printList()
// myLinkedList.remove(2)
// myLinkedList.reverse()
// console.log(myLinkedList.printList());

// class Node {
//   constructor(value) {
//     this.value = value;
//     this.next = null;
//   }
// }

// class Stack {
//   constructor() {
//     this.top = null;
//     this.bottom = null;
//     this.length = 0;
//   }
//   peek() {
//     return this.top;
//   }
//   push(value) {
//     const newNode = new Node(value);
//     if (this.length === 0) {
//       this.top = newNode;
//       this.bottom = newNode;
//     } else {
//       const holdingPointer = this.top;
//       this.top = newNode;
//       this.top.next = holdingPointer;
//     }
//     this.length++;
//     return this;
//   }
//   pop() {
//     if (!this.top) {
//       return null;
//     }
//     if (this.top = this.bottom) {
//       this.bottom = null;
//     }
//     {
//       const holdingPointer = this.top;
//       this.top = this.top.next;
//       this.length--;
//       return holdingPointer;
//     }
//   }
//   //isEmpty
// }
// const myStack = new Stack();
// myStack.push('google')
// myStack.push('udemy')
// myStack.push('discord')
// myStack.peek();
// myStack.pop()
// console.log(myStack.push());
// console.log(myStack.peek());
// console.log(myStack.pop());

// class Node {
//   constructor(value) {
//     this.value = value;
//     this.next = null;
//   }
// }

// class Queue {
//   constructor(){
//     this.first = null;
//     this.last = null;
//     this.length = 0;
//   }
//   peek() {
//   }
//   enqueue(value){
//   }
//   dequeue(){
//   }
//   //isEmpty;
// }

// const myQueue = new Queue();

//Joy
//Matt
//Pavel
//Samir

// class Node {
//   constructor(value){
//     this.left = null;
//     this.right = null;
//     this.value = value;
//   }
// }

// class BinarySearchTree {
//   constructor(){
//     this.root = null;
//   }
//   insert(value){
//     const newNode = new Node(value);
//     if (this.root === null) {
//       this.root = newNode;
//     } else {
//       let currentNode = this.root;
//       while(true){
//         if(value < currentNode.value){
//           //Left
//           if(!currentNode.left){
//             currentNode.left = newNode;
//             return this;
//           }
//           currentNode = currentNode.left;
//         } else {
//           //Right
//           if(!currentNode.right){
//             currentNode.right = newNode;
//             return this;
//           }
//           currentNode = currentNode.right;
//         }
//       }
//     }
//   }
//   lookup(value){
//     if (!this.root) {
//       return false;
//     }
//     let currentNode = this.root;
//     while(currentNode){
//       if(value < currentNode.value){
//         currentNode = currentNode.left;
//       } else if(value > currentNode.value){
//         currentNode = currentNode.right;
//       } else if (currentNode.value === value) {
//         return currentNode;
//       }
//     }
//     return null
//   }
//   remove(value) {
//     if (!this.root) {
//       return false;
//     }
//     let currentNode = this.root;
//     let parentNode = null;
//     while(currentNode){
//       if(value < currentNode.value){
//         parentNode = currentNode;
//         currentNode = currentNode.left;
//       } else if(value > currentNode.value){
//         parentNode = currentNode;
//         currentNode = currentNode.right;
//       } else if (currentNode.value === value) {
//         //We have a match, get to work!

//         //Option 1: No right child:
//         if (currentNode.right === null) {
//           if (parentNode === null) {
//             this.root = currentNode.left;
//           } else {

//             //if parent > current value, make current left child a child of parent
//             if(currentNode.value < parentNode.value) {
//               parentNode.left = currentNode.left;

//             //if parent < current value, make left child a right child of parent
//             } else if(currentNode.value > parentNode.value) {
//               parentNode.right = currentNode.left;
//             }
//           }

//         //Option 2: Right child which doesnt have a left child
//         } else if (currentNode.right.left === null) {
//           if(parentNode === null) {
//             this.root = currentNode.left;
//           } else {
//             currentNode.right.left = currentNode.left;

//             //if parent > current, make right child of the left the parent
//             if(currentNode.value < parentNode.value) {
//               parentNode.left = currentNode.right;

//             //if parent < current, make right child a right child of the parent
//             } else if (currentNode.value > parentNode.value) {
//               parentNode.right = currentNode.right;
//             }
//           }

//         //Option 3: Right child that has a left child
//         } else {

//           //find the Right child's left most child
//           let leftmost = currentNode.right.left;
//           let leftmostParent = currentNode.right;
//           while(leftmost.left !== null) {
//             leftmostParent = leftmost;
//             leftmost = leftmost.left;
//           }

//           //Parent's left subtree is now leftmost's right subtree
//           leftmostParent.left = leftmost.right;
//           leftmost.left = currentNode.left;
//           leftmost.right = currentNode.right;

//           if(parentNode === null) {
//             this.root = leftmost;
//           } else {
//             if(currentNode.value < parentNode.value) {
//               parentNode.left = leftmost;
//             } else if(currentNode.value > parentNode.value) {
//               parentNode.right = leftmost;
//             }
//           }
//         }
//       return true;
//       }
//     }
//   }
//   BreadthFirstSearch(){
//     let currentNode = this.root;
//     let list = [];
//     let queue = [];
//     queue.push(currentNode);

//     while(queue.length > 0){
//       currentNode = queue.shift();
//       list.push(currentNode.value);
//       if(currentNode.left) {
//         queue.push(currentNode.left);
//       }
//       if(currentNode.right) {
//         queue.push(currentNode.right);
//       }
//     }
//     return list;
//   }
// }

// const tree = new BinarySearchTree();
// tree.insert(9)
// tree.insert(4)
// tree.insert(6)
// tree.insert(20)
// tree.insert(170)
// tree.insert(15)
// tree.insert(1)

// console.log('BFS', tree.BreadthFirstSearch());

// //     9
// //  4     20
// //1  6  15  170

// function traverse(node) {
//   const tree = { value: node.value };
//   tree.left = node.left === null ? null : traverse(node.left);
//   tree.right = node.right === null ? null : traverse(node.right);
//   return tree;
// }

let max = 0;
function max(array) {
  let length = array.length;
  for (i = 0; i <= length - 1; i++) {
    if (array[i] > array[i + 1]) {
      max = array[i];
    } else {
      max = array[i + 1];
    }
  }
  return max;
}
console.log(array[(42, 52, 67, 12, 32)]);
