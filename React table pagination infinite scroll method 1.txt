import React, { useRef, useState, useEffect } from "react";

const data = [
  { id: 1, username: "User 1" },
  { id: 2, username: "User 2" },
  { id: 3, username: "User 3" },
  { id: 4, username: "User 4" },
  { id: 5, username: "User 5" },
  { id: 6, username: "User 6" },
  { id: 7, username: "User 7" },
  { id: 8, username: "User 8" },
  { id: 9, username: "User 9" },
  { id: 10, username: "User 10" },
  { id: 11, username: "User 11" },
  { id: 12, username: "User 12" },
  { id: 13, username: "User 13" },
  { id: 14, username: "User 14" },
  { id: 15, username: "User 15" }
  // ... and so on
];

const App = () => {
  const [displayData, setDisplayData] = useState(data.slice(0, 5));
  const [startIndex, setStartIndex] = useState(5);

  const handleScroll = (e) => {
    const { scrollTop, clientHeight, scrollHeight } = e.target;
    if (scrollTop + clientHeight >= scrollHeight - 10) {
      setDisplayData((prevData) => prevData.concat(data.slice(startIndex, startIndex + 5)));
      setStartIndex((prevIndex) => prevIndex + 5);
    }
  };

  return (
    <div
      onScroll={handleScroll}
      style={{ overflowY: "scroll", height: "100px", width: "100%", display: "block" }}
    >
      <table style={{ width: "100%" }}>
        <thead>
          <tr>
            <th>Id</th>
            <th>Username</th>
          </tr>
        </thead>
        <tbody>
          {displayData.map((row) => (
            <tr key={row.id}>
              <td>{row.id}</td>
              <td>{row.username}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default App;
