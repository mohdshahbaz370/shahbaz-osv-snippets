import React from "react";
import * as d3 from "d3";
import { useTranslation } from "react-i18next";
import { XAxisLabels } from "./AllBudget";

const BudgetLineChart = (props: any) => {
  const {
    selectedDuration,
    xAxisValues,
    newXDomain,
    graphData,
    isIncExpGraph,
    graphData2,
    incExpGraphDuration,
    thisYearDuration,
    isIncomeGraph,
    maxDomainIncExpGraph,
  } = props;
  const { t, i18n } = useTranslation();

  const mediaQuery1440Max = window.matchMedia("(max-width: 1440px)");
  const mediaQuery1336Max = window.matchMedia("(max-width: 1336px)");
  const mediaQuery1280Max = window.matchMedia("(max-width: 1280px)");
  const mediaQuery1170Max = window.matchMedia("(max-width: 1170px)");
  let deviceWidth = 500; //default device width;
  if (mediaQuery1440Max.matches) {
    deviceWidth = 480;
  }
  if (mediaQuery1336Max.matches) {
    deviceWidth = 450;
  }
  if (mediaQuery1280Max.matches) {
    deviceWidth = 390;
  }
  if (mediaQuery1170Max.matches) {
    deviceWidth = 375;
  } else {
    width = 300;
  }
  // set the dimensions and margins of the graph
  var margin = { top: 10, right: 50, bottom: 20, left: 30 },
    width = deviceWidth - margin.left - margin.right,
    height = 290 - margin.top - margin.bottom;

  // append the svg object to the body of the page
  d3.select("#lineGraph").selectAll("*").remove(); //To avoid multiple graphs

  const scale = i18n.language === "en" ? 1 : -1; // checking arabic to mirror the SVG
  let transformWidth = i18n.language === "en" ? margin.left : width + 20; // if arabic need to have more width

  const tooltip = d3.select("#lineChartTooltip").attr('style', 'position: absolute; opacity: 0; background-color: blue;');

  var svg = d3
    .select("#lineGraph")
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    // .attr(
    //   "transform",
    //   "translate(" + margin.left + "," + margin.top + ")"
    // )

    .attr(
      "transform",
      "translate(" +
        transformWidth +
        "," +
        margin.top +
        ") scale(" +
        scale +
        ", 1)"
    );

  // Defining the line path and adding some styles
  if (!isIncExpGraph) {
    const xScale = d3.scaleLinear().domain(newXDomain).range([0, width]);
    const yScale = d3
      .scaleLinear()
      .domain([
        d3.min(graphData, (d) => d.balance),
        d3.max(graphData, (d) => d.balance),
      ])
      .range([height, 0]);

    // Drawing line with inner gradient and area
    // Adding functionality to make line and area curved
    const line = d3
      .line()
      .x(function (d) {
        return xScale(d.date);
      })
      .y(function (d) {
        return yScale(d.balance);
      })
      .curve(d3.curveCatmullRom.alpha(0.5));

    const path = svg
      .append("path")
      .attr("d", line(graphData))
      .attr("stroke-width", "2")
      .style("fill", "none")
      .attr("stroke", isIncomeGraph ? "#30b93a" : "#eb3223")
      .attr("opacity", "0.7");

    // Create a selection for circles
    const circles = svg
      .selectAll(".circle")
      .data(graphData)
      .enter()
      .append("circle")
      .attr("class", "circle")
      .attr("cx", (d) => xScale(d.date))
      .attr("cy", (d) => yScale(d.balance))
      .attr("r", 5) // Radius of the circle
      .attr("fill", isIncomeGraph ? "#30b93a" : "#eb3223") // Color of the circle
      .attr("opacity", "0.7")
      .on('mouseover', function(d) {
        d3.select('#lineChartTooltip').transition().duration(200).style('opacity', 1).text(d.balance)
        })
        .on('mouseout', function() {
        d3.select('#lineChartTooltip').style('opacity', 0)
        })
        .on('mousemove', function() {
        d3.select('#lineChartTooltip').style('left', (d3.event.pageX+10) + 'px').style('top', (d3.event.pageY+10) + 'px')
        });

    if (selectedDuration === "THY")
      svg
        .append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(
          d3
            .axisBottom(xScale)
            .tickSize(0)
            .tickPadding(10)
            .tickValues(xAxisValues)
            .tickFormat((d) => XAxisLabels(d, thisYearDuration))
        );
    else
      svg
        .append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(
          d3
            .axisBottom(xScale)
            .tickSize(0)
            .tickPadding(10)
            .tickValues(xAxisValues)
            .tickFormat((d) => XAxisLabels(d, selectedDuration))
        );
    // Adding the y Axis
    svg.append("g").call(d3.axisLeft(yScale).tickSize(0).tickPadding(10).tickFormat(d3.format(".2s")));
  } else {
    const xScale = d3.scaleLinear().domain(newXDomain).range([0, width]);
    const yScale = d3
      .scaleLinear()
      .domain([0, maxDomainIncExpGraph])
      .range([height, 0]);

    // Drawing line with inner gradient and area
    // Adding functionality to make line and area curved
    const line = d3
      .line()
      .x(function (d) {
        return xScale(d.date);
      })
      .y(function (d) {
        return yScale(d.balance);
      })
      .curve(d3.curveCatmullRom.alpha(0.5));

    const path = svg
      .append("path")
      .attr("d", line(graphData))
      .attr("stroke-width", "2")
      .style("fill", "none")
      .attr("stroke", "#30b93a")
      .attr("opacity", "0.7");

    // Create a selection for circles
    const circles = svg
      .selectAll(".circle")
      .data(graphData)
      .enter()
      .append("circle")
      .attr("class", "circle")
      .attr("cx", (d) => xScale(d.date))
      .attr("cy", (d) => yScale(d.balance))
      .attr("r", 5) // Radius of the circle
      .attr("fill", "#30b93a")
      .attr("opacity", "0.7")
      .on('mouseover', function(d) {
        d3.select('#lineChartTooltip').transition().duration(200).style('opacity', 1).text(d.balance)
        })
        .on('mouseout', function() {
        d3.select('#lineChartTooltip').style('opacity', 0)
        })
        .on('mousemove', function() {
        d3.select('#lineChartTooltip').style('left', (d3.event.pageX+10) + 'px').style('top', (d3.event.pageY+10) + 'px')
        });

    const path2 = svg
      .append("path")
      .attr("d", line(graphData2))
      .attr("stroke-width", "2")
      .style("fill", "none")
      .attr("stroke", "#eb3223")
      .attr("opacity", "0.7");

    const circles2 = svg
      .selectAll(".circle2")
      .data(graphData2)
      .enter()
      .append("circle")
      .attr("class", "circle2")
      .attr("cx", (d) => xScale(d.date))
      .attr("cy", (d) => yScale(d.balance))
      .attr("r", 5) // Radius of the circle
      .attr("fill", "#eb3223") // Color of the circle
      .attr("opacity", "0.7")
      .on('mouseover', function(d) {
        d3.select('#lineChartTooltip').transition().duration(200).style('opacity', 1).text(d.balance)
        })
        .on('mouseout', function() {
        d3.select('#lineChartTooltip').style('opacity', 0)
        })
        .on('mousemove', function() {
        d3.select('#lineChartTooltip').style('left', (d3.event.pageX+10) + 'px').style('top', (d3.event.pageY+10) + 'px')
        });
        
      // Adding the x Axis
    svg
      .append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(
        d3
          .axisBottom(xScale)
          .tickSize(0)
          .tickPadding(10)
          .tickValues(xAxisValues)
          .tickFormat((d) => XAxisLabels(d, incExpGraphDuration))
      );
    // Adding the y Axis
    svg.append("g").call(d3.axisLeft(yScale).tickSize(0).tickPadding(10).tickFormat(d3.format(".2s")));
  }

  return (
    <>
      <div className="graph-container">
        <div id="lineGraph"></div>
        <div id="lineChartTooltip"></div>
      </div>
      {/* <div className="chart-wrapper">
                <div id="line-chart" className="chart"></div>
            </div> */}
    </>
  );
};

export default BudgetLineChart;
