import React, { useState, useEffect, useRef} from "react";

const DataFetching = () => {
  const Days = [
    { city: "Patna", id: 1, fullName: "Noor Khan", age: 25 },
    { id: 2, fullName: "Rapsan Jani", age: 26, city: "Noida" },
    { id: 3, age: 18, city: "New Delhi", fullName: "Monika Singh" },
    { id: 4, age: 22, fullName: "Sunil Kumar", city: "Jaipur" },
    { id: 5, fullName: "Kajol Kumari", age: 21, city: "Chennai" },
    { city: "Patna", id: 6, fullName: "Noor Khan", age: 25 },
    { id: 7, fullName: "Rapsan Jani", age: 26, city: "Noida" },
    { id: 8, age: 18, city: "New Delhi", fullName: "Monika Singh" },
    { id: 9, age: 22, fullName: "Sunil Kumar", city: "Jaipur" },
    { id: 10, fullName: "Kajol Kumari", age: 21, city: "Chennai" },
    { city: "Patna", id: 11, fullName: "Noor Khan", age: 25 },
    { id: 12, fullName: "Rapsan Jani", age: 26, city: "Noida" },
    { id: 13, age: 18, city: "New Delhi", fullName: "Monika Singh" },
    { id: 14, age: 22, fullName: "Sunil Kumar", city: "Jaipur" },
    { id: 15, fullName: "Kajol Kumari", age: 21, city: "Chennai" }
  ];

  const [list, setList] = useState([...Days.slice(0,10)]);

  // const [isFetching, setIsFetching] = useState(false);

 
  const [index,setIndex]=useState(10)
  // const [loading,setLoading]=useState(true)
  const [pageNum,setPageNum]=useState(1)
  const [lastElement,setLastElement]=useState(null)
  // const scrollDiv = useRef(null);
  const keys = Object.keys(Days[0]);
  
  // const sd=scrollDiv.current

  let TOTAL_PAGES=Math.ceil((Days.length)/10);

  const observer = useRef(
      
      new IntersectionObserver(
          
          (entries) => {
            setTimeout(()=>{
              const first = entries[0];
              if (first.isIntersecting) {
                  setPageNum((no) => no + 1);
                  console.log("A")
              }
            },2000)
          })
          
  );
  const userData=()=>{
    console.log("B")
    // setLoading(true)
    setList((prevState) => [...prevState,...Days.slice(index,index+10)]);
    
    console.log(index)
    setIndex((prevState)=>prevState+10)
    // setLoading(false)
     
  }
  
  useEffect(()=>{
    console.log("C")
    if(pageNum<=TOTAL_PAGES){ console.log(`pageno:${pageNum}`);userData()}
  },[pageNum])
  
  

  useEffect(() => {
    console.log("D")
    const currentElement = lastElement;
    console.log(lastElement)
    const currentObserver = observer.current;
    
    if (currentElement) {
        console.log("D1")
        currentObserver.observe(currentElement);
    }
    console.log("D2")
    return () => {
        if (currentElement) {
          console.log("D3")
            currentObserver.unobserve(currentElement);
        }
    };
    
}, [lastElement]);

  // const handleScroll=()=> {
  //   console.log("B")
  //   const sd = scrollDiv.current;
  //   if (sd.scrollHeight - sd.offsetHeight === sd.scrollTop)  {
  //     // setIsFetching(true)
  //     setList((prevState) => [...prevState, Days.slice(index,index+5)]);
  //     setIndex((prevState)=>prevState+5)
  //   }
  // }
  // // useEffect(() => {
  //   console.log("A");
  //   // const sd = scrollDiv.current;
  //   document.documentElement.addEventListener("scroll", handleScroll);
  //   // return () => 
  //   document.documentElement.removeEventListener("scroll", handleScroll);
  // }, []);


  // useEffect(() => { 
  //   console.log("C");
  //   if (!isFetching) {
  //     fetchMoreListItems();
  //   }
  // }, [isFetching]);

//   let index=0
// function fetchMoreListItems() {
//   console.log("D")
    // setTimeout(()=>{
    //   setList((prevState) => prevState.concat(Days.slice(index,index+5)));
    //   setIndex(prevState=>[...prevState,prevState+5])
    //   setIsFetching(false);
    // }
    // ,
    // 2000)};
//
  return (
    <div

      
      style={{
        height: "400px",
        width: "300px",
        overflowY: "scroll",
        overflowX: "auto",
      }}
    >
      <table  border="2"style={{ borderCollapse: "bordercollapse" }}>
        <thead>
          <tr>
            {keys.map((e) => (
              <th>{e}</th>
            ))}
          </tr>
        </thead>

        <tbody>
          {list.map((data) => {
            return (
              <tr>
                {keys.map((e) => {
                  return <td ref={setLastElement}>{data[e]}  </td>;
                })}
              </tr>
            );
          })}
          { "Fetching more list items..."}
        </tbody>
      </table>
    </div>
  );
};

export default DataFetching;



